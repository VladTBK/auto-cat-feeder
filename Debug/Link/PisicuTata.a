;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;interrupt [14] void timer1_compa_isr(void){
; 0000 001A interrupt [14] void timer1_compa_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B milliseconds ++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001C if(milliseconds >= 1000){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D milliseconds = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001E seconds++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001F if(seconds >= 60){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020 seconds = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0021 mins++;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022 if(mins >= 60){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0023 mins = 0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0024 hours++;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0025 }
; 0000 0026 }
;PCODE: $0000002E VOL: 0
; 0000 0027 }
;PCODE: $0000002F VOL: 0
; 0000 0028 
; 0000 0029 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;unsigned long readCount(void){
; 0000 002E unsigned long readCount(void){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002F unsigned long Count;
; 0000 0030 unsigned int i;
; 0000 0031 DDRA |= (1<<3);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	Count -> Y+2
;	i -> R16,R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0032 DOUT = 1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0033 CLK = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0034 Count=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0035 DDRA &= ~(1<<3);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0036 while(PIN_DOUT);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0037 for (i=0;i<24;i++){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0038 CLK = 1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0039 Count=Count<<1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 003A CLK = 0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003B if(PIN_DOUT)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003C Count++;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003D }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003E CLK = 1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003F Count=Count^0x800000;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0040 CLK = 0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0041 return(Count);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0042 }
;PCODE: $00000074 VOL: 0
;void determineWeight(){
; 0000 0044 void determineWeight(){
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0045 count= readCount();
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0046 currentWeight=((((count-sample)/val)-2*((count-sample)/val))/2); // calcul folsoind valorie calbirate pentru a determina greutatea
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0047 if (currentWeight < 0) // sunt cazuri atunci cand cantarul este static din cauza balansului si a stabilitati ca greutatea sa fie -1 sau -2
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0048 currentWeight = 0;
;PCODE: $00000087 VOL: 0
; 0000 0049 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;void stepMotor(){
; 0000 004C void stepMotor(){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004D if(rotationDir){   // rotatie counter-clockwise
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004E PORTB = 0b10010000;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004F delay_us(rotationSpeed);
;PCODE: $00000091 VOL: 0
; 0000 0050 PORTB = 0b00110000;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0051 delay_us(rotationSpeed);
;PCODE: $00000094 VOL: 0
; 0000 0052 PORTB = 0b01100000;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0053 delay_us(rotationSpeed);
;PCODE: $00000097 VOL: 0
; 0000 0054 PORTB = 0b11000000;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0055 delay_us(rotationSpeed);
;PCODE: $0000009A VOL: 0
; 0000 0056 }
; 0000 0057 else{             // rotatie clockwise
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0058 PORTB = 0b10010000;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0059 delay_us(rotationSpeed);
;PCODE: $0000009F VOL: 0
; 0000 005A PORTB = 0b11000000;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 005B delay_ms(rotationSpeed);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005C PORTB = 0b01100000;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005D delay_ms(rotationSpeed);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005E PORTB = 0b00110000;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005F delay_ms(rotationSpeed);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0060 }
;PCODE: $000000AC VOL: 0
; 0000 0061 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;void putZeroTime(unsigned long time){
; 0000 0064 void putZeroTime(unsigned long time){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0065 if(time<10)
;PCODE: $000000B1 VOL: 0
;	time -> Y+0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0066 lcd_printf("0%d",time);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0067 else
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0068 lcd_printf("%d",time);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0069 }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;void putZeroWeight(unsigned long Weight){
; 0000 006A void putZeroWeight(unsigned long Weight){
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006B if(Weight<10)
;PCODE: $000000CF VOL: 0
;	Weight -> Y+0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 006C lcd_printf("000%d",Weight);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 006D else if(Weight <100)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 006E lcd_printf("00%d",Weight);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 006F else if(Weight <1000)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0070 lcd_printf("0%d",Weight);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0071 else
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0072 lcd_printf("%d",Weight);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0073 }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;void lcdShowMainFrame(){
; 0000 0074 void lcdShowMainFrame(){
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0075 // display current time//
; 0000 0076 lcd_gotoxy(0,0);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0077 lcd_printf("Time: ");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0078 putZeroTime(hours);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0079 lcd_printf(":");
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 007A putZeroTime(mins);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 007B lcd_printf(":");
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 007C putZeroTime(seconds);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 007D lcd_printf("  ");
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 007E // display curent max weight and check food time
; 0000 007F lcd_gotoxy(0,1);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0080 lcd_printf("Fd:%ds MaxW:%dg",FoodTime,maxWeight);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0081 
; 0000 0082 }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;void lcdShowSecondFrame(){
; 0000 0083 void lcdShowSecondFrame(){
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0084 // display current time//
; 0000 0085 lcd_gotoxy(0,0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0086 lcd_printf("Time: ");
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0087 putZeroTime(hours);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0088 lcd_printf(":");
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0089 putZeroTime(mins);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 008A lcd_printf(":");
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 008B putZeroTime(seconds);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 008C lcd_printf("  ");
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 008D // display current weight //
; 0000 008E lcd_gotoxy(0,1);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 008F putZeroWeight(currentWeight);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0090 lcd_printf("g           ");
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0091 }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;void lcdShowThirdFrame(){
; 0000 0092 void lcdShowThirdFrame(){
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0093 lcd_gotoxy(0,0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0094 lcd_printf("Not enough food!");
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0095 // display current weight //
; 0000 0096 lcd_gotoxy(0,1);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0097 putZeroWeight(currentWeight);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0098 lcd_printf("g           ");
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0099 }
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;void lcdShowFourthFrame(){
; 0000 009A void lcdShowFourthFrame(){
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 009B lcd_gotoxy(0,0);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 009C lcd_printf("Enough food!     ");
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 009D // display current weight //
; 0000 009E lcd_gotoxy(0,1);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 009F putZeroWeight(currentWeight);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00A0 lcd_printf("g           ");
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00A1 }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;void displayCurrentFrame(){
; 0000 00A2 void displayCurrentFrame(){
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00A3 if(!changeFrames)
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00A4 lcdShowMainFrame();
;PCODE: $000001BA VOL: 0
; 0000 00A5 else{
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00A6 determineWeight();
;PCODE: $000001BD VOL: 0
; 0000 00A7 lcdShowSecondFrame();
;PCODE: $000001BE VOL: 0
; 0000 00A8 }
;PCODE: $000001BF VOL: 0
; 0000 00A9 }
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;void checkButton(){
; 0000 00AB void checkButton(){
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00AC if(!SW1){
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00AD delay_ms(30);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00AE if(!SW1){
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00AF while(!SW1);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00B0 if(!changeFrames)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00B1 changeFrames = 1; // la umatoarea apasare a butonului vreau sa vad greutatea
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00B2 else
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00B3 changeFrames = 0; // la urmatoarea apasare a butonul vreau sa vad timpul
;PCODE: $000001D9 VOL: 0
; 0000 00B4 }
;PCODE: $000001DA VOL: 0
; 0000 00B5 }
;PCODE: $000001DB VOL: 0
; 0000 00B6 }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;void mainAlgorithm(){
; 0000 00B8 void mainAlgorithm(){
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00B9 if(seconds == checkFoodTime){ //verifica daca au trecut mai mult de 10 secunde
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00BA delayEquivalent = seconds;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00BB checkFoodTime +=FoodTime;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00BC if(checkFoodTime >= 60)
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00BD checkFoodTime = checkFoodTime - 60;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00BE // in caz ca foar fi 57 de exemplu , 57 + 10 ar da 67. Secundele / Minutele nu pot numara pana la 67 , de acea trebuie sa sccadem o perioada de timp
; 0000 00BF determineWeight();
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00C0 if(currentWeight < maxWeight){
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00C1 while((seconds - delayEquivalent) < 5){  // in loc sa folosim delayuri mari, cu valoarea salvata anterior in delayEquivalent, facem acest while timp de 5 secunde numarate de timer
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00C2 wdogtrig();
;PCODE: $000001FC VOL: 0
; 0000 00C3 lcdShowThirdFrame();
;PCODE: $000001FD VOL: 0
; 0000 00C4 if((seconds - delayEquivalent) >=3)
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00C5 motorWasOn = 1;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00C6 if(!motorWasOn) // nu vrem sa invartim motorul tot while-ul de afisare, vrem o perioade diferita
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 00C7 stepMotor();
;PCODE: $0000020A VOL: 0
; 0000 00C8 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00C9 motorWasOn = 0;// repornim motorul petru urmatoare verificare
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00CA }
; 0000 00CB else{
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 00CC while((seconds - delayEquivalent) < 5){
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00CD wdogtrig();
;PCODE: $00000219 VOL: 0
; 0000 00CE lcdShowFourthFrame();
;PCODE: $0000021A VOL: 0
; 0000 00CF }
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00D0 }
;PCODE: $0000021D VOL: 0
; 0000 00D1 lcd_clear();
;PCODE: $0000021E VOL: 0
; 0000 00D2 }
; 0000 00D3 }
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;void main(void){
; 0000 00D4 void main(void){
;PCODE: $00000222 VOL: 0
; 0000 00D5 maxWeight = 100; FoodTime = 20; // greutate este calculata in grame, timpul in secunde
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00D6 checkFoodTime = FoodTime;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 00D7 InitUc();
;PCODE: $00000229 VOL: 0
; 0000 00D8 #asm("sei");
;PCODE: $0000022A VOL: 0
; 0000 00D9 while (1){
;PCODE: $0000022B VOL: 0
; 0000 00DA wdogtrig();
;PCODE: $0000022C VOL: 0
; 0000 00DB mainAlgorithm();
;PCODE: $0000022D VOL: 0
; 0000 00DC checkButton();
;PCODE: $0000022E VOL: 0
; 0000 00DD displayCurrentFrame();
;PCODE: $0000022F VOL: 0
; 0000 00DE }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00DF }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
