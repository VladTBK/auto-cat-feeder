;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void InitUc(void)
; 0001 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0006 // Declare your local variables here
; 0001 0007 
; 0001 0008 // Crystal Oscillator division factor: 1
; 0001 0009 #pragma optsize-
; 0001 000A CLKPR=(1<<CLKPCE);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000B CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000C #ifdef _OPTIMIZE_SIZE_
; 0001 000D #pragma optsize+
; 0001 000E #endif
; 0001 000F 
; 0001 0010 // Input/Output Ports initialization
; 0001 0011 // Port A initialization
; 0001 0012 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0013 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0014 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0015 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0016 
; 0001 0017 // Port B initialization
; 0001 0018 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0019 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0); // setam ca output pentru motor
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 001A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 001B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 001C 
; 0001 001D // Port C initialization
; 0001 001E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 001F DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0020 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0021 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0022 
; 0001 0023 // Port D initialization
; 0001 0024 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0025 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0026 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0027 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0028 
; 0001 0029 // Timer/Counter 0 initialization
; 0001 002A // Clock source: System Clock
; 0001 002B // Clock value: Timer 0 Stopped
; 0001 002C // Mode: Normal top=0xFF
; 0001 002D // OC0A output: Disconnected
; 0001 002E // OC0B output: Disconnected
; 0001 002F TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0030 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0031 TCNT0=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0032 OCR0A=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0033 OCR0B=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0034 
; 0001 0035 // Timer/Counter 1 initialization
; 0001 0036 // Clock source: System Clock
; 0001 0037 // Clock value: Timer1 Stopped
; 0001 0038 // Mode: Normal top=0xFFFF
; 0001 0039 // OC1A output: Disconnected
; 0001 003A // OC1B output: Disconnected
; 0001 003B // Noise Canceler: Off
; 0001 003C // Input Capture on Falling Edge
; 0001 003D // Timer1 Overflow Interrupt: Off
; 0001 003E // Input Capture Interrupt: Off
; 0001 003F // Compare A Match Interrupt: Off
; 0001 0040 // Compare B Match Interrupt: Off
; 0001 0041 TCCR1A=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0042 TCCR1B=0x0D; // mod compare si prescalare cu 1024
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0043 TCNT1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0044 TCNT1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0045 ICR1H=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0046 ICR1L=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0047 
; 0001 0048 // TImerul are o prescalare cu 1024 adica fcreventa lui este de aproximativ 20kHz (perioada de 50 us) =>
; 0001 0049 // timer-ul o sa aiba un tick la fiecare 50us. Avem nevoie de o intrerupere la fiecare ms => 20 de tick-uri
; 0001 004A OCR1AH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 004B OCR1AL=0x14;   // 20 in hex.
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 004C 
; 0001 004D // Timer/Counter 2 initialization
; 0001 004E // Clock source: System Clock
; 0001 004F // Clock value: Timer2 Stopped
; 0001 0050 // Mode: Normal top=0xFF
; 0001 0051 // OC2A output: Disconnected
; 0001 0052 // OC2B output: Disconnected
; 0001 0053 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0054 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 0055 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0056 TCNT2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0057 OCR2A=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0058 OCR2B=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0059 
; 0001 005A // Timer/Counter 0 Interrupt(s) initialization
; 0001 005B TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 005C 
; 0001 005D // Timer/Counter 1 Interrupt(s) initialization
; 0001 005E TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 005F 
; 0001 0060 // Timer/Counter 2 Interrupt(s) initialization
; 0001 0061 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0062 
; 0001 0063 // External Interrupt(s) initialization
; 0001 0064 // INT0: Off
; 0001 0065 // INT1: Off
; 0001 0066 // INT2: Off
; 0001 0067 // Interrupt on any change on pins PCINT0-7: Off
; 0001 0068 // Interrupt on any change on pins PCINT8-15: Off
; 0001 0069 // Interrupt on any change on pins PCINT16-23: Off
; 0001 006A // Interrupt on any change on pins PCINT24-31: Off
; 0001 006B EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 006C EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 006D PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 006E 
; 0001 006F // USART0 initialization
; 0001 0070 // USART0 disabled
; 0001 0071 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0072 
; 0001 0073 // USART1 initialization
; 0001 0074 // USART1 disabled
; 0001 0075 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0076 
; 0001 0077 // Analog Comparator initialization
; 0001 0078 // Analog Comparator: Off
; 0001 0079 // The Analog Comparator's positive input is
; 0001 007A // connected to the AIN0 pin
; 0001 007B // The Analog Comparator's negative input is
; 0001 007C // connected to the AIN1 pin
; 0001 007D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 007E ADCSRB=(0<<ACME);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 007F // Digital input buffer on AIN0: On
; 0001 0080 // Digital input buffer on AIN1: On
; 0001 0081 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0082 
; 0001 0083 // ADC initialization
; 0001 0084 // ADC disabled
; 0001 0085 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0086 
; 0001 0087 // SPI initialization
; 0001 0088 // SPI disabled
; 0001 0089 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 008A 
; 0001 008B // TWI initialization
; 0001 008C // TWI disabled
; 0001 008D TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 008E 
; 0001 008F // Alphanumeric LCD initialization
; 0001 0090 // Connections are specified in the
; 0001 0091 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 0092 // RS: PORTC Bit 0
; 0001 0093 // RD: PORTC Bit 1
; 0001 0094 // EN: PORTC Bit 2
; 0001 0095 // D4: PORTC Bit 3
; 0001 0096 // D5: PORTC Bit 4
; 0001 0097 // D6: PORTC Bit 5
; 0001 0098 // D7: PORTC Bit 6
; 0001 0099 // Characters/line: 16
; 0001 009A lcd_init(16);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 009B 
; 0001 009C #pragma optsize-
; 0001 009D #asm("wdr")
;PCODE: $00000067 VOL: 0
; 0001 009E WDTCSR|=(1<<WDCE) | (1<<WDE);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 009F WDTCSR=(1<<WDIF) | (1<<WDIE) | (0<<WDP3) | (0<<WDCE) | (0<<WDE) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 00A0 #ifdef _OPTIMIZE_SIZE_
; 0001 00A1 #pragma optsize+
; 0001 00A2 #endif
; 0001 00A3 
; 0001 00A4 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
